# .github/workflows/python-ci.yml
name: Python CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]
      
      - name: Install SPARQLWrapper
        run: pip install SPARQLWrapper

      - name: Run tests with Tox
        run: |
          source venv/bin/activate
          tox -e py

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml

      - name: Run a python file
        run: |
          source venv/bin/activate
          python src/scholaridreconciler/dblp_testdata.py
    
      - name: upload print results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app.log
          path: src/scholaridreconciler/app.log

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run linting with Tox
        run: |
          source venv/bin/activate
          tox -e format
          tox -e lint

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run coverage with Tox
        run: |
          source venv/bin/activate
          tox -e coverage

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml

  type_check:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run type checks with Tox
        run: |
          source venv/bin/activate
          tox -e type

      - name: Run type checks with Tox
        run: |
          source venv/bin/activate
          tox -e type

  commit-check:
    name: Validate Commit Messages
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Install Git (if not already available)
      - name: Install Git
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      # Step 3: Validate Commit Messages
      - name: Validate Commit Messages
        id: commit_validation
        run: |
          - echo "Validating commit messages..."
          - |
            COMMITS=$(git log --pretty=%s --no-merges --reverse)
            IFS=$'\n'
            COMMIT_PATTERN="^[Ii]nitial\scommit$|^(build|ci|docs|feat|fix|perf|refactor|style|test|revert):\s.+$|^Revert\s.+$|^Add\s(LICENSE|CHANGELOG)$|^updated python version for CI$|^Merge\sbranch\s.+$"

            for COMMIT in $COMMITS; do
                if ! [[ "$COMMIT" =~ $COMMIT_PATTERN ]]; then
                    echo "Invalid commit message: $COMMIT"
                    exit 1
                fi
      
                if [[ ${#COMMIT} -gt 100 ]]; then
                  echo "Commit message too long (more than 100 characters): $COMMIT"
                  exit 1
                fi
            done
            unset IFS
        if: '$CI_PIPELINE_SOURCE == "push"'
