# .github/workflows/python-ci.yml
name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * *"  # Runs every day at midnight UTC; adjust as needed
  workflow_dispatch:  # Allows manual triggering

jobs:
  
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]
      
      - name: Install SPARQLWrapper
        run: pip install SPARQLWrapper

      - name: Run tests with Tox
        run: |
          source venv/bin/activate
          tox -e py

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml
    
      - name: upload print results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app.log
          path: src/scholaridreconciler/app.log

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run linting with Tox
        run: |
          source venv/bin/activate
          tox -e format
          tox -e lint

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run coverage with Tox
        run: |
          source venv/bin/activate
          tox -e coverage

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml

  type_check:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run type checks with Tox
        run: |
          source venv/bin/activate
          tox -e type

      - name: Run type checks with Tox
        run: |
          source venv/bin/activate
          tox -e type

  commit-check:
    name: Validate Commit Messages
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Install Git (if not already available)
      - name: Install Git
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      # Step 3: Validate Commit Messages
      - name: Validate Commit Messages
        id: commit_validation
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "Validating commit messages..."
          
          # Get all commit messages in the push
          COMMITS=$(git log --pretty=%s origin/main..HEAD --no-merges --reverse)
      
          # Define commit message pattern
          COMMIT_PATTERN="^[Ii]nitial\scommit$|^(build|ci|docs|feat|fix|perf|refactor|style|test|revert):\s.+$|^Revert\s.+$|^Add\s(LICENSE|CHANGELOG)$|^updated python version for CI$|^Merge\sbranch\s.+$"
          
          # Initialize failure flag
          FAIL=0
          
          # Split commits into an array
          COMMITS_ARRAY=($COMMITS)
          
          # Debug: print commit messages to validate
          echo "Commits to validate:"
          echo "$COMMITS"

          # Iterate over each commit message
          for COMMIT in "${COMMITS_ARRAY[@]}"; do
            # Check if commit message matches the pattern
            if ! [[ "$COMMIT" =~ $COMMIT_PATTERN ]]; then
              echo "Invalid commit message: '$COMMIT'"
              FAIL=1
            fi

            # Check if commit message length exceeds 100 characters
            COMMIT_LENGTH=${#COMMIT}
            if [[ "$COMMIT_LENGTH" -gt 100 ]]; then
              echo "Commit message too long ($COMMIT_LENGTH characters): '$COMMIT'"
              FAIL=1
            fi
          done
          
          # If any failures were found, exit with error code
          if [[ "$FAIL" -eq 1 ]]; then
            echo "❗ Commit message validation failed."
            exit 1
          else
            echo "✅ All commit messages are valid."
          fi
      
  retrieve_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies and create virtual environment
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install .[test]

      - name: Run data retrieval script
        run: |
          source venv/bin/activate
          python src/scholaridreconciler/retrieve_data.py
          python src/scholaridreconciler/services/organisation_data.py

      - name: Commit and push changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add organisation_data.csv
          git commit -m "ci: Update organsiation_data with latest data"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push changes on schedule
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add Dataframe_id.csv
          git commit -m "ci: Update dataframe_id with latest data"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
